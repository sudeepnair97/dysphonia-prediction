import 'dart:convert';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'dart:io' as io;
import 'dart:async';

import 'package:flutter_audio_recorder/flutter_audio_recorder.dart';
import 'package:audioplayers/audioplayers.dart';
import 'package:path_provider/path_provider.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:http/http.dart' as http;

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Flutter Audio Recorder Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(title: 'VoiceDoc'),
    );
  }
}

class AgeRange{
  const AgeRange(this.id,this.range);

  final int id;
  final String range;
}

class Gender{
  const Gender(this.genderId,this.gender);

  final int genderId;
  final String gender;
}


class MyHomePage extends StatefulWidget {
  MyHomePage({Key key, this.title}) : super(key: key);

  final String title;

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  AgeRange selectedRange;
  Gender selectedGender;
  String result;
  String accuracy;
  String precision;
  String recall;
  List<AgeRange> ranges = <AgeRange>[
    const AgeRange(2, '17-29') ,
    const AgeRange(3, '30-39') ,
    const AgeRange(4, '40-49') ,
    const AgeRange(5, '50-59') ,
    const AgeRange(6, '60+')];

  List<Gender> genders = <Gender>[
    const Gender(0, 'Male'),
    const Gender(1, 'Female')
  ];

  FlutterAudioRecorder _recorder;
  Recording _recording;
  Timer _t;
  Widget _buttonIcon = Icon(Icons.do_not_disturb_on);
  String _alert;

  @override
  void initState() {
    super.initState();
    Future.microtask(() {
      _prepare();
    });
    selectedRange = ranges[0];
    selectedGender = genders[0];
  }

  void _opt() async {
    switch (_recording.status) {
      case RecordingStatus.Initialized:
        {
          await _startRecording();
          break;
        }
      case RecordingStatus.Recording:
        {
          await _stopRecording();
          break;
        }
      case RecordingStatus.Stopped:
        {
          await _prepare();
          break;
        }

      default:
        break;
    }

    setState(() {
      _buttonIcon = _playerIcon(_recording.status);
    });
  }

  Future _init() async {
    String customPath = '/flutter_audio_recorder_';
    io.Directory appDocDirectory;
    if (io.Platform.isIOS) {
      appDocDirectory = await getApplicationDocumentsDirectory();
    } else {
      appDocDirectory = await getExternalStorageDirectory();
    }

    // can add extension like ".mp4" ".wav" ".m4a" ".aac"
    customPath = appDocDirectory.path +
        customPath +
        DateTime.now().millisecondsSinceEpoch.toString();

    // .wav <---> AudioFormat.WAV
    // .mp4 .m4a .aac <---> AudioFormat.AAC
    // AudioFormat is optional, if given value, will overwrite path extension when there is conflicts.

    _recorder = FlutterAudioRecorder(customPath,
        audioFormat: AudioFormat.WAV, sampleRate: 22050);
    await _recorder.initialized;
  }

  Future _prepare() async {
    var hasPermission = await FlutterAudioRecorder.hasPermissions;
    if (hasPermission) {
      await _init();
      var result = await _recorder.current();
      setState(() {
        _recording = result;
        _buttonIcon = _playerIcon(_recording.status);
        _alert = "";
      });
    } else {
      setState(() {
        _alert = "Permission Required.";
      });
    }
  }

  Future _startRecording() async {
    await _recorder.start();
    var current = await _recorder.current();
    setState(() {
      _recording = current;
    });

    _t = Timer.periodic(Duration(milliseconds: 10), (Timer t) async {
      var current = await _recorder.current();
      setState(() {
        _recording = current;
        _t = t;
      });
    });
  }

  Future _stopRecording() async {
    var result = await _recorder.stop();
    _t.cancel();

    setState(() {
      _recording = result;
    });
  }

  void _play() {
    AudioPlayer player = AudioPlayer();
    player.play(_recording.path, isLocal: true);
  }

  Widget _playerIcon(RecordingStatus status) {
    switch (status) {
      case RecordingStatus.Initialized:
        {
          return Icon(Icons.fiber_manual_record);
        }
      case RecordingStatus.Recording:
        {
          return Icon(Icons.stop);
        }
      case RecordingStatus.Stopped:
        {
          return Icon(Icons.replay);
        }
      default:
        return Icon(Icons.do_not_disturb_on);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
      ),
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(40.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: <Widget>[
              Text(
                'Select age range',
                style: Theme.of(context).textTheme.title,
              ),
              DropdownButton<AgeRange>(
                value: selectedRange,
                onChanged: (AgeRange newRange){
                  setState(() {
                    selectedRange = newRange;
                  });
                },
                items: ranges.map((AgeRange ageRange){
                  return new DropdownMenuItem<AgeRange>(
                    value: ageRange,
                    child: new Text(
                      ageRange.range,
                      style: new TextStyle(color: Colors.black),
                    ),
                  );
                }).toList(),
              ),
              Text(
                'Select gender',
                style: Theme.of(context).textTheme.title,
              ),
              DropdownButton<Gender>(
                value: selectedGender,
                onChanged: (Gender newGender){
                  setState(() {
                    selectedGender = newGender;
                  });
                },
                items: genders.map((Gender genderValue){
                  return new DropdownMenuItem<Gender>(
                    value: genderValue,
                    child: new Text(
                      genderValue.gender,
                      style: new TextStyle(color: Colors.black),
                    ),
                  );
                }).toList(),
              ),
              Text(
                'Record yourself saying the vowel "a" for 2 seconds by pressing the record button',
                style: Theme.of(context).textTheme.title,
              ),
              SizedBox(
                height: 20,
              ),
              Text(
                'Duration',
                style: Theme.of(context).textTheme.title,
              ),
              SizedBox(
                height: 5,
              ),
              Text(
                '${_recording?.duration}',
                style: Theme.of(context).textTheme.body1,
              ),
              RaisedButton(
                child: Text('Play'),
                disabledTextColor: Colors.white,
                disabledColor: Colors.grey.withOpacity(0.5),
                onPressed: _recording?.status == RecordingStatus.Stopped
                    ? _play
                    : null,
              ),
              SizedBox(
                height: 20,
              ),
              Text(
                '${_alert ?? ""}',
                style: Theme.of(context)
                    .textTheme
                    .title
                    .copyWith(color: Colors.red),
              ),
              Row(
                children: <Widget>[
                  RaisedButton(
                    child: Text('SVM'),
                    color: Colors.amberAccent,
                    onPressed: (){
                      var data = {
                        'gender' : selectedGender.genderId,
                        'age' : selectedRange.id,
                        'select' : 'SVM',
                        'file' : '${_recording?.path}'
                      };
                      setState(() {
                        result = 'Loading ...';
                        accuracy = 'Loading ...';
                        precision = 'Loading ...';
                        recall = 'Loading ...';
                      });
                      upload(data);
                      getResult();
                      getAccuracy();
                      getPrecision();
                      getRecall();
                      navigateToNextPage();
                    },
                  ),
                  SizedBox(
                    width: 30,
                  ),
                  RaisedButton(
                    child: Text('Ensemble SVM'),
                    color: Colors.amberAccent,
                    onPressed: (){
                      var data = {
                        'gender' : selectedGender.genderId,
                        'age' : selectedRange.id,
                        'select' : 'EnsembleSVM',
                        'file' : '${_recording?.path}'
                      };
                      setState(() {
                        result = 'Loading ...';
                        accuracy = 'Loading ...';
                        precision = 'Loading ...';
                        recall = 'Loading ...';
                      });
                      upload(data);
                      getResult();
                      getAccuracy();
                      getPrecision();
                      getRecall();
                      navigateToNextPage();
                    },
                  )
                ]
              )
            ],
          ),
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _opt,
        child: _buttonIcon,
      ), // This trailing comma makes auto-formatting nicer for build methods.
    );
  }

  void upload(var data) {
    String dataJSON = jsonEncode(data);
    var jsonFile = new io.File('/storage/emulated/0/Android/data/com.example.voice_disorder_detection/files/dataJSON.json');
    jsonFile.writeAsString(dataJSON);
    var audioFile = new io.File(_recording?.path);
    StorageReference firebaseReference = FirebaseStorage.instance.ref().child('sound.wav');
    StorageUploadTask task = firebaseReference.putFile(audioFile);
    firebaseReference = FirebaseStorage.instance.ref().child('data.json');
    task = firebaseReference.putFile(jsonFile);
  }
  
  void navigateToNextPage(){
    Navigator.of(context).push(
      MaterialPageRoute<void>(
        builder: (BuildContext context) {
          return Scaffold(
            appBar: AppBar(
              title: Text('Results'),
            ),
            body:Padding(
              padding: const EdgeInsets.all(62.0),
              child:Center(
                child: Column(
                  children: <Widget>[
                    SizedBox(
                      height: 20,
                    ),
                    Text(
                      'Result',
                      style: TextStyle(
                          fontSize: 60.0,
                          fontWeight: FontWeight.bold
                      )
                    ),
                    SizedBox(
                      height: 20,
                    ),
                    Text('Result : '+ this.result , style: TextStyle(fontSize: 30.0),),
                    SizedBox(
                      height: 20,
                    ),
                    Text(
                      'Accuracy(%) : '+accuracy,
                       style: TextStyle(fontSize: 20.0),
                    ),
                    SizedBox(
                      height: 20,
                    ),
                    Text(
                        'Precision(%) : '+ this.precision ,
                        style: TextStyle(fontSize: 20.0)
                    ),
                    SizedBox(
                      height: 20,

                    ),
                    Text(
                        'Recall(%) : '+ this.recall,
                        style: TextStyle(fontSize: 20.0)
                    ),
                    SizedBox(
                      height: 20,
                    ),
                  ],
                ),
              ),
            ),
          );
        },
      ),
    );
  }


  Future<void> getResult() async {
    try{
      StorageReference firebaseReference = FirebaseStorage.instance.ref().child('output.json');
      final String url = await firebaseReference.getDownloadURL();
      final http.Response downloadData = await http.get(url);
      final dynamic jsonData = jsonDecode(downloadData.body);
      print(jsonData);
      print(jsonData['Class']);
      if(jsonData['Class'] == 0){
        setState(() {
          result =  'Healthy';
        });
      }
      if(jsonData['Class'] == 1){
        setState(() {
          result =  'Pathological';
        });
      }
      Navigator.of(context).pop();
      navigateToNextPage();
      FirebaseStorage.instance.ref().child('sound.wav').delete();
      FirebaseStorage.instance.ref().child('data.json').delete();
    }
    on Exception{
      getResult();
    }
  }

  Future<void> getAccuracy() async{
    String acc = 'Empty';
    try{
      StorageReference firebaseReference = FirebaseStorage.instance.ref().child('output.json');
      final String url = await firebaseReference.getDownloadURL();
      final http.Response downloadData = await http.get(url);
      final dynamic jsonData = jsonDecode(downloadData.body);
      acc =  jsonData['Accuracy'].toString();
      setState(() {
        accuracy = acc;
        Navigator.of(context).pop();
        navigateToNextPage();
        FirebaseStorage.instance.ref().child('sound.wav').delete();
        FirebaseStorage.instance.ref().child('data.json').delete();
      });
    }
    catch(e){
      getAccuracy();
    }
  }

  Future<void> getPrecision() async{
    String pre = 'Empty';
    try{
      StorageReference firebaseReference = FirebaseStorage.instance.ref().child('output.json');
      final String url = await firebaseReference.getDownloadURL();
      final http.Response downloadData = await http.get(url);
      final dynamic jsonData = jsonDecode(downloadData.body);
      pre =  jsonData['Precision'].toString();
      setState(() {
        precision = pre;
        Navigator.of(context).pop();
        navigateToNextPage();
        FirebaseStorage.instance.ref().child('sound.wav').delete();
        FirebaseStorage.instance.ref().child('data.json').delete();
      });
    }
    on Exception{
      getPrecision();
    }
  }

  Future<void> getRecall() async{
    String rec = 'Empty';
    try{
      StorageReference firebaseReference = FirebaseStorage.instance.ref().child('output.json');
      final String url = await firebaseReference.getDownloadURL();
      final http.Response downloadData = await http.get(url);
      final dynamic jsonData = jsonDecode(downloadData.body);
      firebaseReference.delete();
      rec =  jsonData['Recall'].toString();
      setState(() {
        recall = rec;
        Navigator.of(context).pop();
        navigateToNextPage();
        FirebaseStorage.instance.ref().child('sound.wav').delete();
        FirebaseStorage.instance.ref().child('data.json').delete();
      });
    }
    on Exception{
      getRecall();
    }
  }
}
